/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * OpenAPI definition
 * OpenAPI spec version: v0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import axios from 'axios';
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios';

import type {
  VoteCountResponse,
  VoteRequest
} from '.././schemas';





export const createVote = (
    voteRequest: VoteRequest, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    
    return axios.post(
      `https://api.hackathon-fiipractic.octavianregatun.com/votes`,
      voteRequest,options
    );
  }



export const getCreateVoteMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createVote>>, TError,{data: VoteRequest}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof createVote>>, TError,{data: VoteRequest}, TContext> => {

const mutationKey = ['createVote'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createVote>>, {data: VoteRequest}> = (props) => {
          const {data} = props ?? {};

          return  createVote(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateVoteMutationResult = NonNullable<Awaited<ReturnType<typeof createVote>>>
    export type CreateVoteMutationBody = VoteRequest
    export type CreateVoteMutationError = AxiosError<unknown>

    export const useCreateVote = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createVote>>, TError,{data: VoteRequest}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof createVote>>,
        TError,
        {data: VoteRequest},
        TContext
      > => {

      const mutationOptions = getCreateVoteMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const getVoteCount = (
    teamId: number, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<VoteCountResponse>> => {
    
    
    return axios.get(
      `https://api.hackathon-fiipractic.octavianregatun.com/votes/count/${teamId}`,options
    );
  }


export const getGetVoteCountQueryKey = (teamId: number,) => {
    return [`https://api.hackathon-fiipractic.octavianregatun.com/votes/count/${teamId}`] as const;
    }

    
export const getGetVoteCountQueryOptions = <TData = Awaited<ReturnType<typeof getVoteCount>>, TError = AxiosError<unknown>>(teamId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVoteCount>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetVoteCountQueryKey(teamId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getVoteCount>>> = ({ signal }) => getVoteCount(teamId, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(teamId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getVoteCount>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetVoteCountQueryResult = NonNullable<Awaited<ReturnType<typeof getVoteCount>>>
export type GetVoteCountQueryError = AxiosError<unknown>


export function useGetVoteCount<TData = Awaited<ReturnType<typeof getVoteCount>>, TError = AxiosError<unknown>>(
 teamId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVoteCount>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVoteCount>>,
          TError,
          Awaited<ReturnType<typeof getVoteCount>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetVoteCount<TData = Awaited<ReturnType<typeof getVoteCount>>, TError = AxiosError<unknown>>(
 teamId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVoteCount>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVoteCount>>,
          TError,
          Awaited<ReturnType<typeof getVoteCount>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetVoteCount<TData = Awaited<ReturnType<typeof getVoteCount>>, TError = AxiosError<unknown>>(
 teamId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVoteCount>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetVoteCount<TData = Awaited<ReturnType<typeof getVoteCount>>, TError = AxiosError<unknown>>(
 teamId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVoteCount>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetVoteCountQueryOptions(teamId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



