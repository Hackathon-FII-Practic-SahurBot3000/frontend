/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * OpenAPI definition
 * OpenAPI spec version: v0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import axios from 'axios';
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios';

import type {
  LinkRequest,
  LinkResponse,
  LinkUpdateRequest
} from '.././schemas';





export const updateLink = (
    id: number,
    linkUpdateRequest: LinkUpdateRequest, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    
    return axios.put(
      `http://localhost:8080/links/${id}`,
      linkUpdateRequest,options
    );
  }



export const getUpdateLinkMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateLink>>, TError,{id: number;data: LinkUpdateRequest}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof updateLink>>, TError,{id: number;data: LinkUpdateRequest}, TContext> => {

const mutationKey = ['updateLink'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateLink>>, {id: number;data: LinkUpdateRequest}> = (props) => {
          const {id,data} = props ?? {};

          return  updateLink(id,data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateLinkMutationResult = NonNullable<Awaited<ReturnType<typeof updateLink>>>
    export type UpdateLinkMutationBody = LinkUpdateRequest
    export type UpdateLinkMutationError = AxiosError<unknown>

    export const useUpdateLink = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateLink>>, TError,{id: number;data: LinkUpdateRequest}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof updateLink>>,
        TError,
        {id: number;data: LinkUpdateRequest},
        TContext
      > => {

      const mutationOptions = getUpdateLinkMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const deleteLink = (
    id: number, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    
    return axios.delete(
      `http://localhost:8080/links/${id}`,options
    );
  }



export const getDeleteLinkMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteLink>>, TError,{id: number}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof deleteLink>>, TError,{id: number}, TContext> => {

const mutationKey = ['deleteLink'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteLink>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  deleteLink(id,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteLinkMutationResult = NonNullable<Awaited<ReturnType<typeof deleteLink>>>
    
    export type DeleteLinkMutationError = AxiosError<unknown>

    export const useDeleteLink = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteLink>>, TError,{id: number}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deleteLink>>,
        TError,
        {id: number},
        TContext
      > => {

      const mutationOptions = getDeleteLinkMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const createLink = (
    linkRequest: LinkRequest, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    
    return axios.post(
      `http://localhost:8080/links`,
      linkRequest,options
    );
  }



export const getCreateLinkMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createLink>>, TError,{data: LinkRequest}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof createLink>>, TError,{data: LinkRequest}, TContext> => {

const mutationKey = ['createLink'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createLink>>, {data: LinkRequest}> = (props) => {
          const {data} = props ?? {};

          return  createLink(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateLinkMutationResult = NonNullable<Awaited<ReturnType<typeof createLink>>>
    export type CreateLinkMutationBody = LinkRequest
    export type CreateLinkMutationError = AxiosError<unknown>

    export const useCreateLink = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createLink>>, TError,{data: LinkRequest}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof createLink>>,
        TError,
        {data: LinkRequest},
        TContext
      > => {

      const mutationOptions = getCreateLinkMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const getLinksByUserId = (
    userId: number, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<LinkResponse[]>> => {
    
    
    return axios.get(
      `http://localhost:8080/links/user/${userId}`,options
    );
  }


export const getGetLinksByUserIdQueryKey = (userId: number,) => {
    return [`http://localhost:8080/links/user/${userId}`] as const;
    }

    
export const getGetLinksByUserIdQueryOptions = <TData = Awaited<ReturnType<typeof getLinksByUserId>>, TError = AxiosError<unknown>>(userId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLinksByUserId>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetLinksByUserIdQueryKey(userId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getLinksByUserId>>> = ({ signal }) => getLinksByUserId(userId, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(userId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getLinksByUserId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetLinksByUserIdQueryResult = NonNullable<Awaited<ReturnType<typeof getLinksByUserId>>>
export type GetLinksByUserIdQueryError = AxiosError<unknown>


export function useGetLinksByUserId<TData = Awaited<ReturnType<typeof getLinksByUserId>>, TError = AxiosError<unknown>>(
 userId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLinksByUserId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLinksByUserId>>,
          TError,
          Awaited<ReturnType<typeof getLinksByUserId>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetLinksByUserId<TData = Awaited<ReturnType<typeof getLinksByUserId>>, TError = AxiosError<unknown>>(
 userId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLinksByUserId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLinksByUserId>>,
          TError,
          Awaited<ReturnType<typeof getLinksByUserId>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetLinksByUserId<TData = Awaited<ReturnType<typeof getLinksByUserId>>, TError = AxiosError<unknown>>(
 userId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLinksByUserId>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetLinksByUserId<TData = Awaited<ReturnType<typeof getLinksByUserId>>, TError = AxiosError<unknown>>(
 userId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLinksByUserId>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetLinksByUserIdQueryOptions(userId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



